{
	"name": "code-d",
	"displayName": "D Programming Language (code-d)",
	"description": "auto-complete, snippets, linter and formatter for dlang",
	"version": "0.23.2",
	"publisher": "webfreak",
	"repository": {
		"type": "git",
		"url": "https://github.com/Pure-D/code-d.git"
	},
	"icon": "images/dlogo-square.png",
	"license": "MIT",
	"engines": {
		"vscode": "^1.60.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters",
		"Formatters",
		"Other"
	],
	"activationEvents": [
		"onLanguage:d",
		"onLanguage:dml",
		"onDebugResolve:d",
		"onDebugDynamicConfigurations",
		"onDebugInitialConfigurations",
		"workspaceContains:dub.json",
		"workspaceContains:dub.sdl",
		"onCommand:code-d.switchConfiguration",
		"onCommand:code-d.switchArchType",
		"onCommand:code-d.switchBuildType",
		"onCommand:code-d.switchCompiler",
		"onCommand:code-d.killServer",
		"onCommand:code-d.restartServer",
		"onCommand:code-d.reloadImports",
		"onCommand:code-d.stop",
		"onCommand:code-d.insertDscanner",
		"onCommand:code-d.rdmdCurrent",
		"onCommand:code-d.generateCoverageReport",
		"onCommand:code-d.showGCCalls",
		"onCommand:code-d.createProject",
		"onCommand:code-d.addImport",
		"onCommand:code-d.searchDocs",
		"onCommand:code-d.openDocsAtCursor",
		"onCommand:code-d.convertDubRecipe",
		"onCommand:code-d.setupCompiler",
		"onCommand:code-d.viewUserGuide",
		"onCustomEditor:code-d.dubRecipe"
	],
	"main": "./out/extension",
	"keywords": [
		"d",
		"dlang",
		"d language",
		"code-d",
		"serve-d",
		"d programming"
	],
	"bugs": {
		"email": "code-d@webfreak.org",
		"url": "https://github.com/Pure-D/code-d/issues"
	},
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "Per-project executable paths will be disabled",
			"restrictedConfigurations": [
				"d.servedPath",
				"d.dcdClientPath",
				"d.dcdServerPath",
				"d.dubPath",
				"d.dmdPath",
				"d.dubCompiler"
			]
		}
	},
	"contributes": {
		"keybindings": [
			{
				"command": "code-d.searchDocs",
				"key": "ctrl-q ctrl-q",
				"when": "editorTextFocus && editorLangId == 'd'"
			},
			{
				"command": "code-d.sortImports",
				"key": "ctrl-q ctrl-s",
				"when": "editorTextFocus && editorLangId == 'd'"
			}
		],
		"breakpoints": [
			{
				"language": "d"
			}
		],
		"debuggers": [
			{
				"type": "code-d",
				"label": "D (code-d: Native Debug / C++ / CodeLLDB)",
				"configurationAttributes": {
					"launch": {
						"required": [
							"program"
						],
						"properties": {
							"cwd": {
								"type": "string",
								"description": "Absolute path to the program cwd.",
								"default": "${workspaceFolder}"
							},
							"program": {
								"type": "string",
								"description": "Absolute or relative path to the program to run.",
								"default": "${command:dubTarget}"
							},
							"args": {
								"type": [
									"array",
									"string"
								],
								"items": {
									"type": "string"
								},
								"description": "Command line arguments to pass to the program. Can be a string which is passed as-is to Native Debug or parsed for C++. Can also be an array which is concatenated using the platform variable or current executing platform on Native Debug or passed as-is for C++. Using a string for this on Native Debug means you can use pipes and such as they are handled by GDB.",
								"default": []
							},
							"env": {
								"type": "object",
								"description": "Additional environment variables",
								"default": {}
							},
							"config": {
								"type": "object",
								"description": "Debug configuration members to overwrite launch settings.",
								"default": {}
							},
							"dubBuild": {
								"type": "boolean",
								"description": "Build the active DUB project before launching.",
								"default": false
							},
							"platform": {
								"type": "string",
								"enum": [
									"aix",
									"android",
									"darwin",
									"freebsd",
									"linux",
									"openbsd",
									"sunos",
									"win32",
									"cygwin"
								],
								"description": "Optional string to override the native nodejs process.platform. Changes how the debugger is invoked like how arguments are escaped, etc.",
								"default": ""
							},
							"debugger": {
								"type": "string",
								"default": "autodetect",
								"enum": [
									"autodetect",
									"gdb",
									"lldb",
									"mago",
									"vsdbg",
									"code-lldb",
									"cpp-auto",
									"cpp-gdb",
									"cpp-lldb",
									"nd-gdb",
									"nd-lldb"
								],
								"enumDescriptions": [
									"Automatically pick GDB, LLDB, Visual Studio debugger or Mago depending on platform and globally installed applications, automatically chooses the used debugger extension depending if they are installed. Prefers the C++ debug extension.",
									"Use GDB with an automatically determined installed debugger extension. Prefers the C++ debug extension.",
									"Use LLDB with an automatically determined installed debugger extension. Prefers the C++ debug extension.",
									"Use Mago with an automatically determined installed debugger extension. Currently only supported as mago-mi by the Native Debug extension.",
									"Use Visual Studio debugger with an automatically determined installed debugger extension. Currently only supported by the C++ extension on Windows.",
									"Use GDB or LLDB through the C++ debug extension. (predetermined by C++ extension)",
									"Use GDB through the C++ debug extension.",
									"Use LLDB through the C++ debug extension.",
									"Use GDB through the Native Debug debug extension.",
									"Use LLDB through the Native Debug debug extension."
								],
								"description": "Changes which debugger engine / backend to use from the installed debuggers."
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "code-d",
						"request": "launch",
						"name": "Debug D project",
						"cwd": "${workspaceFolder}",
						"program": "./executableBinaryName"
					}
				],
				"configurationSnippets": [
					{
						"label": "DUB: Build & Launch",
						"description": "Build & Launch the current DUB project through a debugger",
						"body": {
							"type": "code-d",
							"request": "launch",
							"dubBuild": true,
							"name": "${1:Build & Debug DUB project}",
							"cwd": "^\"\\${command:dubWorkingDirectory}\"",
							"program": "^\"\\${command:dubTarget}\""
						}
					},
					{
						"label": "D: Launch",
						"description": "Launch a D binary through a debugger",
						"body": {
							"type": "code-d",
							"request": "launch",
							"name": "${1:Debug D project}",
							"cwd": "^\"\\${workspaceFolder}\"",
							"program": "${2:./executableBinaryName}"
						}
					}
				],
				"variables": {
					"dubPackageName": "code-d.getActiveDubPackageName",
					"dubPackagePath": "code-d.getActiveDubPackagePath",
					"dubWorkingDirectory": "code-d.getActiveDubWorkingDirectory",
					"dubTarget": "code-d.getActiveDubTarget",
					"dubTargetPath": "code-d.getActiveDubTargetPath",
					"dubTargetName": "code-d.getActiveDubTargetName"
				}
			},
			{
				"type": "code-d__just_providing_initial_configuration_in_dropdown",
				"label": "DUB (code-d: Native Debug / C++ / CodeLLDB)",
				"initialConfigurations": [
					{
						"type": "code-d",
						"request": "launch",
						"dubBuild": true,
						"name": "Build & Debug DUB project",
						"cwd": "${command:dubWorkingDirectory}",
						"program": "${command:dubTarget}"
					}
				]
			}
		],
		"viewsWelcome": [
			{
				"view": "debug",
				"contents": "You can run any D files (or D statements in an untitled file) through RDMD using this button, the command palette or by right-clicking a D file. To run or debug complex projects use DUB.\n[Run File with RDMD](command:code-d.rdmdCurrent)",
				"when": "d.isActive"
			}
		],
		"languages": [
			{
				"id": "d",
				"extensions": [
					".d",
					".di"
				],
				"aliases": [
					"D",
					"Dlang"
				],
				"firstLine": "^#!.*(dub|rdmd)",
				"configuration": "./lang-configs/d.json"
			},
			{
				"id": "dpp",
				"extensions": [
					".dpp",
					".d++"
				],
				"aliases": [
					"D++"
				],
				"configuration": "./lang-configs/d.json"
			},
			{
				"id": "dscript",
				"aliases": [
					"arsd.DScript"
				],
				"extensions": [
					".dscript",
					".ds"
				],
				"configuration": "./lang-configs/general.json"
			},
			{
				"id": "dml",
				"aliases": [
					"DlangUI Markup Language"
				],
				"extensions": [
					".dml"
				],
				"configuration": "./lang-configs/general.json"
			},
			{
				"id": "sdl",
				"aliases": [
					"SDL",
					"Simple Declarative Language"
				],
				"extensions": [
					".sdl"
				],
				"configuration": "./lang-configs/general.json"
			},
			{
				"id": "diet",
				"aliases": [
					"Diet"
				],
				"extensions": [
					".dt"
				],
				"configuration": "./lang-configs/diet.json"
			},
			{
				"id": "d-injection"
			}
		],
		"grammars": [
			{
				"language": "d",
				"scopeName": "source.d",
				"path": "./syntaxes/d.json"
			},
			{
				"language": "dscript",
				"scopeName": "source.dscript",
				"path": "./syntaxes/d.json"
			},
			{
				"language": "dml",
				"scopeName": "source.dml",
				"path": "./syntaxes/dml.json"
			},
			{
				"language": "sdl",
				"scopeName": "source.sdl",
				"path": "./syntaxes/sdl.json"
			},
			{
				"language": "diet",
				"scopeName": "source.diet",
				"path": "./syntaxes/diet.json"
			},
			{
				"language": "d-injection",
				"scopeName": "markdown.d.codeblock",
				"path": "./syntaxes/codeblock.json",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.d": "d"
				}
			}
		],
		"snippets": [
			{
				"language": "diet",
				"path": "./snippets/diet.json"
			}
		],
		"configuration": [
			{
				"title": "General",
				"type": "object",
				"properties": {
					"d.servedPath": {
						"type": "string",
						"scope": "machine-overridable",
						"title": "Serve-D LSP Path",
						"default": "serve-d",
						"order": 0,
						"markdownDescription": "Path of the serve-d executable, the used LSP server. Path can be omitted if in `$PATH` or auto-installed using code-d on startup."
					},
					"d.servedReleaseChannel": {
						"type": "string",
						"scope": "application",
						"default": "stable",
						"order": 1,
						"enum": [
							"stable",
							"beta",
							"nightly",
							"frozen"
						],
						"enumDescriptions": [
							"Always fetch the latest pre-compiled stable release binaries from the serve-d GitHub repository",
							"Always fetch the latest pre-compiled potentially unstable pre-release binaries from the serve-d GitHub repository",
							"Always fetch the latest pre-compiled nightly binaries from the serve-d GitHub repository. These are being generated every night (UTC) if something changed and tests passed.",
							"Don't do any update checks for serve-d (not recommended if you don't update serve-d outside code-d)"
						],
						"markdownDescription": "Release channel (stable, beta, nightly) to automatically download serve-d binaries from. serve-d is the D language server used with code-d and provides all language functionality except syntax highlighting, which is provided by code-d."
					},
					"d.aggressiveUpdate": {
						"type": "boolean",
						"scope": "application",
						"default": true,
						"order": 2,
						"markdownDescription": "Automatically update and install outdated or missing tools without user confirmation."
					},
					"d.showUpdateChangelogs": {
						"type": "boolean",
						"scope": "application",
						"default": true,
						"order": 3,
						"markdownDescription": "Open `CHANGELOG.md` on every code-d update (which also includes serve-d updates) to see new features."
					}
				}
			},
			{
				"title": "Auto-Completion",
				"type": "object",
				"properties": {
					"d.enableAutoComplete": {
						"order": 0,
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Enable auto-completion in D files, mostly powered by DCD.\n\nIf you have a custom DCD setup, you can change the started dcd-server binary through the `#d.dcdServerPath#` setting."
					},
					"d.stdlibPath": {
						"scope": "machine-overridable",
						"title": "Standard Library (Phobos) Path",
						"order": 1,
						"oneOf": [
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							{
								"type": "string"
							}
						],
						"defaultSnippets": [
							{
								"label": "Choose based on platform",
								"body": "auto"
							},
							{
								"label": "Linux Default",
								"body": [
									"/usr/include/dmd/druntime/import",
									"/usr/include/dmd/phobos"
								]
							},
							{
								"label": "ArchLinux Default",
								"body": [
									"/usr/include/dlang/dmd"
								]
							},
							{
								"label": "Windows Default",
								"body": [
									"C:\\D\\dmd2\\src\\druntime\\import",
									"C:\\D\\dmd2\\src\\phobos"
								]
							},
							{
								"label": "OSX Default",
								"body": [
									"/Library/D/dmd/src/druntime/import",
									"/Library/D/dmd/src/phobos"
								]
							}
						],
						"markdownDescription": "Array of paths to phobos and D runtime for automatic inclusion for auto completion"
					},
					"d.dcdServerPath": {
						"title": "DCD Server Path",
						"type": "string",
						"scope": "machine-overridable",
						"default": "dcd-server",
						"order": 2,
						"markdownDescription": "Path of the dcd-server executable. Path can be omitted if in `$PATH` or installed using code-d"
					},
					"d.dcdClientPath": {
						"title": "DCD Client Path",
						"type": "string",
						"scope": "machine-overridable",
						"default": "dcd-client",
						"order": 3,
						"markdownDescription": "Path of the dcd-client executable. Path can be omitted if in `$PATH` or installed using code-d"
					},
					"d.projectImportPaths": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"markdownDescription": "Sets the import paths in your workspace, only when not using DUB. This will replace other paths. Its recommended to set this in your workspace or folder settings instead of your user settings to keep it separate for each project. Note that these import paths will not be used if DUB is enabled and used in the project. See `#d.neverUseDub#` to disable DUB."
					},
					"d.argumentSnippets": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Insert function signatures (function arguments) as snippets which can be navigated using tab when auto-completing functions."
					},
					"d.dietContextCompletion": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Read `//-context=path/to/file.d` comments in diet files and act like the D code inside the diet file comes from there, to allow auto-completion of local symbols."
					}
				}
			},
			{
				"title": "DUB",
				"type": "object",
				"properties": {
					"d.dubPath": {
						"type": "string",
						"scope": "machine-overridable",
						"default": "dub",
						"order": 4,
						"markdownDescription": "Path of the dub executable. Path can be omitted if in `$PATH` or installed using code-d"
					},
					"d.dubConfiguration": {
						"type": "string",
						"scope": "resource",
						"order": 5,
						"markdownDescription": "Sets the default DUB configuration. Used in DUB linting, auto-completion import paths and DUB build tasks and debugging."
					},
					"d.dubArchType": {
						"type": "string",
						"scope": "resource",
						"order": 6,
						"markdownDescription": "Sets the default DUB architecture. Used in DUB linting, auto-completion import paths and DUB build tasks and debugging."
					},
					"d.dubBuildType": {
						"type": "string",
						"scope": "resource",
						"order": 7,
						"markdownDescription": "Sets the default DUB build type. Used in DUB linting, auto-completion import paths and DUB build tasks and debugging."
					},
					"d.dubCompiler": {
						"type": "string",
						"scope": "machine-overridable",
						"order": 8,
						"markdownDescription": "Sets the default DUB compiler. Used in DUB linting, auto-completion import paths and DUB build tasks and debugging."
					},
					"d.scanAllFolders": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"order": 9,
						"markdownDescription": "Initialize isolated workspaces for every dub.sdl and dub.json file in all folders, avoiding mixing import paths in unrelated projects."
					},
					"d.neverUseDub": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Disable DUB integration and require manually provided import paths using `#d.projectImportPaths#`.\n\nThis is discouraged as it will remove most features like resolving dependencies, building and compiler linting. For standalone projects with no external dependencies with a custom build system then this can be useful."
					},
					"d.alwaysShowDubStatusButtons": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Always show DUB Configuration/Arch Type/Build Type/Compiler buttons in DUB projects, and not just when a D file is open."
					},
					"d.dependencyClickBehavior": {
						"type": "string",
						"scope": "window",
						"enum": [
							"listDocumentsPreview",
							"listDocumentsSource",
							"listDocumentsBoth",
							"openRecipe",
							"openDpldocs",
							"doNothing",
							"openFileDialog"
						],
						"enumItemLabels": [
							"Preview Text Document",
							"Open Text Document Source",
							"Show Text Document Actions",
							"Open Package Recipe",
							"Open dpldocs.info",
							"Do nothing",
							"Open File Dialog"
						],
						"enumDescriptions": [
							"Preview a readable document text file of the package",
							"See source of a readable document text file of the package",
							"Preview or view source of a readable document text file of the package",
							"Open dub.json / dub.sdl file of the package",
							"Open package on dpldocs.info in a web browser",
							"Do nothing",
							"Open a file dialog in the dependency folder"
						],
						"default": "listDocumentsPreview",
						"markdownDescription": "Configures what happens when you click a dependency in the DUB Dependency view. For the listDocuments actions if only a single file matches, it is immediately opened. See `#d.dependencyTextDocumentFilter#` setting to configure which files will be shown."
					},
					"d.dependencyTextDocumentFilter": {
						"type": "array",
						"scope": "window",
						"items": {
							"type": "string"
						},
						"default": [
							"^README",
							"^CHANGES",
							"^CHANGELOG",
							"^LICENSE"
						],
						"markdownDescription": "Filenames that are considered readable documents for when viewing documents of a DUB dependency. You can use regular expressions, but it only matches on the filename (including extension) not on the path, case-insensitive."
					}
				}
			},
			{
				"title": "Linting",
				"type": "object",
				"properties": {
					"d.enableLinting": {
						"order": 0,
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Enable errors and warnings (squiggly lines) while editing source code.\n\nTurning this off disables all diagnostics coming from code-d.You can toggle\n\n- `#d.enableSDLLinting#`\n- `#d.enableDubLinting#`\n- `#d.enableStaticLinting#`\n\nfor finer control instead."
					},
					"d.enableStaticLinting": {
						"order": 1,
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Check D file for errors and warnings, without being built, whenever typing.\n\nOnly has an effect if `#d.enableLinting#` is also turned on."
					},
					"d.enableDubLinting": {
						"order": 2,
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Compile DUB projects on save to check for compile errors.\n\nThis is very similar to running `dub build` on the command line to see what actual errors occur, but does not output any executable or library.\n\nOnly has an effect if `#d.enableLinting#` is also turned on."
					},
					"d.enableSDLLinting": {
						"order": 3,
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Check `dub.sdl` files for errors and warnings.\n\nOnly has an effect if `#d.enableLinting#` is also turned on."
					},
					"d.lintOnFileOpen": {
						"type": "string",
						"scope": "resource",
						"default": "project",
						"enum": [
							"always",
							"project",
							"never"
						],
						"enumDescriptions": [
							"Every opened file will be linted immediately, also for any internal cross-project or external dependencies.",
							"Opened files in the current project will be linted immediately. Other files will be linted when editing.",
							"Opening files will not lint and only start when editing them."
						],
						"markdownDescription": "Performs static linting already when opening a file, and not just when editing it. Needs `#d.enableStaticLinting#` to be enabled."
					},
					"dscanner.ignoredKeys": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string",
							"enum": [
								"dscanner.bugs.backwards_slices",
								"dscanner.bugs.if_else_same",
								"dscanner.bugs.logic_operator_operands",
								"dscanner.bugs.self_assignment",
								"dscanner.confusing.argument_parameter_mismatch",
								"dscanner.confusing.brexp",
								"dscanner.confusing.builtin_property_names",
								"dscanner.confusing.constructor_args",
								"dscanner.confusing.function_attributes",
								"dscanner.confusing.lambda_returns_lambda",
								"dscanner.confusing.logical_precedence",
								"dscanner.confusing.struct_constructor_default_args",
								"dscanner.deprecated.delete_keyword",
								"dscanner.deprecated.floating_point_operators",
								"dscanner.if_statement",
								"dscanner.performance.enum_array_literal",
								"dscanner.style.allman",
								"dscanner.style.alias_syntax",
								"dscanner.style.doc_missing_params",
								"dscanner.style.doc_missing_returns",
								"dscanner.style.doc_non_existing_params",
								"dscanner.style.explicitly_annotated_unittest",
								"dscanner.style.has_public_example",
								"dscanner.style.imports_sortedness",
								"dscanner.style.long_line",
								"dscanner.style.number_literals",
								"dscanner.style.phobos_naming_convention",
								"dscanner.style.undocumented_declaration",
								"dscanner.suspicious.auto_ref_assignment",
								"dscanner.suspicious.catch_em_all",
								"dscanner.suspicious.comma_expression",
								"dscanner.suspicious.incomplete_operator_overloading",
								"dscanner.suspicious.incorrect_infinite_range",
								"dscanner.suspicious.label_var_same_name",
								"dscanner.suspicious.length_subtraction",
								"dscanner.suspicious.local_imports",
								"dscanner.suspicious.missing_return",
								"dscanner.suspicious.object_const",
								"dscanner.suspicious.redundant_attributes",
								"dscanner.suspicious.redundant_parens",
								"dscanner.suspicious.static_if_else",
								"dscanner.suspicious.unmodified",
								"dscanner.suspicious.unused_label",
								"dscanner.suspicious.unused_parameter",
								"dscanner.suspicious.unused_variable",
								"dscanner.suspicious.useless_assert",
								"dscanner.unnecessary.duplicate_attribute",
								"dscanner.useless.final",
								"dscanner.useless-initializer",
								"dscanner.vcall_ctor",
								"dscanner.syntax"
							]
						},
						"markdownDescription": "DScanner warnings to ignore in this project.\n\nTo disable warnings also with standalone D-Scanner, inside CI or for other people, create a `dscanner.ini` file in the project root.\n\nYou can use the `Insert default dscanner.ini content` command from the VSCode command palette to fill it with defaults."
					}
				}
			},
			{
				"title": "Formatting",
				"type": "object",
				"properties": {
					"d.enableFormatting": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Apply standard VSCode Formatting behavior to D files. Formatting on save can be configured with `#editor.formatOnSave#`"
					},
					"d.overrideDfmtEditorconfig": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Use the VSCode `dfmt.*` config options & editor settings instead of `.editorconfig` files. This avoids inconsistencies with the vscode editor settings, it's recommended to only turn this off when you have the EditorConfig extension for VSCode installed."
					},
					"dfmt.alignSwitchStatements": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Align labels, cases, and defaults with their enclosing switch."
					},
					"dfmt.braceStyle": {
						"type": "string",
						"scope": "resource",
						"enum": [
							"allman",
							"otbs",
							"stroustrup",
							"knr"
						],
						"enumDescriptions": [
							"Curly braces always on separate lines",
							"Curly braces on the same line as for example if or while statements. Else on same line as closing curly brace.",
							"Curly braces on the same line as for example if or while statements, but a new line after the closing curly brace, even if there is an else",
							"Curly braces on the same line for everything except functions"
						],
						"default": "allman",
						"markdownDescription": "See Wikipedia https://en.wikipedia.org/wiki/Brace_style"
					},
					"dfmt.outdentAttributes": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Not yet implemented (on dfmt side)"
					},
					"dfmt.spaceAfterCast": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Insert space after the closing paren of a cast expression."
					},
					"dfmt.splitOperatorAtLineEnd": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Place operators on the end of the previous line when splitting lines."
					},
					"dfmt.selectiveImportSpace": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Insert space after the module name and before the `:` for selective imports."
					},
					"dfmt.compactLabeledStatements": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Place labels on the same line as the labeled `switch`, `for`, `foreach`, or `while` statement."
					},
					"dfmt.templateConstraintStyle": {
						"type": "string",
						"scope": "resource",
						"enum": [
							"conditional_newline_indent",
							"conditional_newline",
							"always_newline",
							"always_newline_indent"
						],
						"enumDescriptions": [
							"newline only if constraint will wrap, indent constraint",
							"newline only if constraint will wrap",
							"always add newline",
							"always add newline and indent the constraint"
						],
						"default": "conditional_newline_indent",
						"markdownDescription": "Control the formatting of template constraints. See https://github.com/dlang-community/dfmt/issues/215"
					},
					"dfmt.spaceBeforeFunctionParameters": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Insert space before the opening paren of a function parameter list."
					},
					"dfmt.singleTemplateConstraintIndent": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Set if the constraints are indented by a single tab instead of two. Has only an effect if `#dfmt.templateConstraintStyle#` is set to `always_newline_indent` or `conditional_newline_indent`."
					},
					"dfmt.spaceBeforeAAColon": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Adds a space after an associative array key before the `:` like in older dfmt versions."
					},
					"dfmt.keepLineBreaks": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Keep existing line breaks if these don't violate other formatting rules."
					},
					"dfmt.singleIndent": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Set if the code in parens is indented by a single tab instead of two."
					}
				}
			},
			{
				"title": "Editing Features",
				"type": "object",
				"properties": {
					"d.enableIndex": {
						"order": 0,
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Enable cached background indexing that is used for find references and auto-import suggestions in completion and code actions."
					},
					"d.enableDMDImportTiming": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Add code lenses (gray text above source code) on import statements to show how long each import takes to compile on its own. Executes DMD, as set by `#d.dmdPath#`, to get the impact on compilation time by this import."
					},
					"d.enableCoverageDecoration": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Automatically highlight tested/untested coverage inside source code with light red/green backgrounds from `*.lst` files. You can for example run `dub test --config=unittest-cov` to run unittests and collect coverage information."
					},
					"d.enableGCProfilerDecorations": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Automatically embed code lenses (gray text above source code) for GC allocations based on `profilegc.log`. You can for example run `dub run --config=profile-gc` to run the project and see where the GC is actually used."
					},
					"d.alwaysShowCoverageStatus": {
						"type": "boolean",
						"scope": "resource",
						"default": false,
						"markdownDescription": "Always show D code coverage status in status bar when available through `.lst` files, and not just when a D file is open."
					},
					"d.generateModuleNames": {
						"type": "boolean",
						"scope": "resource",
						"default": true,
						"markdownDescription": "Automatically insert or replace the `module name;` when creating or renaming a file."
					}
				}
			},
			{
				"title": "Advanced",
				"type": "object",
				"properties": {
					"d.disabledRootGlobs": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"order": 0,
						"markdownDescription": "Array of [globs](https://dlang.org/phobos/std_path.html#.globMatch) for preventing project instances in certain folders by the `#d.scanAllFolders#` setting. The globs should match the DUB project folders, e.g. the ones that contain a `dub.json` or `dub.sdl` file."
					},
					"d.extraRoots": {
						"type": "array",
						"scope": "resource",
						"items": {
							"type": "string"
						},
						"default": [],
						"order": 1,
						"markdownDescription": "Array of workspace-relative (or absolute) folders to force start a project instance in."
					},
					"d.ccdbPath": {
						"type": "string",
						"scope": "resource",
						"default": null,
						"description": "Path to a Clang compilation database (aka. CCDB, aka. `compile_commands.json`) to use to lint this project"
					},
					"d.dmdPath": {
						"type": "string",
						"scope": "machine-overridable",
						"default": "dmd",
						"markdownDescription": "Path of the dmd executable. Path can be omitted if in `$PATH`. Used with the `#d.enableDMDImportTiming#` setting and to compile serve-d if there is no pre-compiled binary for the running platform."
					},
					"d.betaStream": {
						"type": "boolean",
						"scope": "application",
						"markdownDeprecationMessage": "This option has been replaced by setting `#d.servedReleaseChannel#` to `\"nightly\"`.",
						"default": false,
						"description": "Always get latest serve-d commit when starting vscode and an update is available."
					},
					"d.smartServedUpdates": {
						"title": "Smart Serve-D updates",
						"type": "boolean",
						"scope": "application",
						"default": true,
						"markdownDescription": "Randomly omit serve-d update checks to save bandwidth. Lowers startup delay and minimizes breakage on new releases with quick fixes. Also avoids to update when working on fridays."
					},
					"d.manyProjectsAction": {
						"type": "string",
						"scope": "resource",
						"default": "ask",
						"enum": [
							"ask",
							"skip",
							"load"
						],
						"markdownEnumDescriptions": [
							"Open a dialog box each time there are too many projects. (recommended inside the user settings)",
							"Never load any more projects than the `#d.manyProjectsThreshold#` setting specified. (this or `\"load\"` recommended only per-project)",
							"Load all projects even if there are more than the `#d.manyProjectsThreshold#` setting specified. (this or `\"skip\"` recommended only per-project; not recommended for user settings or large projects with many DUB test projects)"
						],
						"markdownDescription": "What to do when there are too many project roots to load from. The deepest folder paths are skipped for skip."
					},
					"d.manyProjectsThreshold": {
						"type": "number",
						"scope": "resource",
						"default": 4,
						"minimum": 0,
						"markdownDescription": "After how many projects to start checking the `#d.manyProjectsAction#` to load or not load further projects."
					},
					"d.ignoreDebugHints": {
						"type": "boolean",
						"scope": "window",
						"default": false,
						"markdownDescription": "Don't show alerts when a project may be wrongly configured when trying to start debugging."
					}
				}
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "resourceLangId == d",
					"command": "code-d.openDocsAtCursor",
					"group": "navigation"
				}
			],
			"explorer/context": [
				{
					"when": "resourceLangId == d",
					"command": "code-d.rdmdCurrent",
					"group": "1_modification"
				}
			],
			"editor/title": [
				{
					"when": "resourceFilename =~ /dub\\.json|dub\\.sdl/",
					"command": "code-d.convertDubRecipe",
					"group": "navigation"
				}
			],
			"view/title": [
				{
					"command": "code-d.reloadImports",
					"when": "view == dubDependencies",
					"group": "navigation"
				},
				{
					"command": "code-d.addDependency",
					"when": "view == dubDependencies",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "code-d.updateDependency",
					"when": "view == dubDependencies && viewItem == root",
					"group": "1_packageManagement"
				},
				{
					"command": "code-d.openDubRecipe",
					"when": "view == dubDependencies && viewItem =~ /root|dependency/",
					"group": "3_files"
				},
				{
					"command": "code-d.openDubOnDpldocs",
					"when": "view == dubDependencies && viewItem == root",
					"group": "3_files"
				},
				{
					"command": "code-d.listDubPackageDocuments",
					"when": "view == dubDependencies && viewItem =~ /root|dependency/",
					"group": "3_files"
				},
				{
					"command": "code-d.openDependencyFile",
					"when": "view == dubDependencies && viewItem =~ /root|dependency/",
					"group": "3_files"
				},
				{
					"command": "code-d.removeDependency",
					"when": "view == dubDependencies && viewItem == root",
					"group": "9_danger"
				}
			],
			"commandPalette": [
				{
					"command": "code-d.addDependency",
					"when": "false"
				},
				{
					"command": "code-d.removeDependency",
					"when": "false"
				},
				{
					"command": "code-d.updateDependency",
					"when": "false"
				},
				{
					"command": "code-d.viewDubPackage",
					"when": "false"
				},
				{
					"command": "code-d.openDubRecipe",
					"when": "false"
				},
				{
					"command": "code-d.openDubOnDpldocs",
					"when": "false"
				},
				{
					"command": "code-d.listDubPackageDocuments",
					"when": "false"
				},
				{
					"command": "code-d.openDependencyFile",
					"when": "false"
				},
				{
					"command": "code-d.convertDubRecipe",
					"when": "resourceFilename =~ /dub\\.json|dub\\.sdl/"
				},
				{
					"command": "code-d.openDocsAtCursor",
					"when": "false"
				}
			]
		},
		"views": {
			"explorer": [
				{
					"id": "dubDependencies",
					"name": "DUB Dependencies",
					"when": "d.hasDubProject"
				}
			]
		},
		"commands": [
			{
				"command": "code-d.addDependency",
				"title": "Add Dependency",
				"category": "code-d",
				"icon": {
					"light": "images/adddep-light.svg",
					"dark": "images/adddep-dark.svg"
				}
			},
			{
				"command": "code-d.removeDependency",
				"title": "Remove",
				"category": "code-d"
			},
			{
				"command": "code-d.updateDependency",
				"title": "Update to latest version",
				"category": "code-d"
			},
			{
				"command": "code-d.viewDubPackage",
				"title": "Default DUB dependency click action",
				"category": "code-d"
			},
			{
				"command": "code-d.openDubRecipe",
				"title": "Edit DUB recipe",
				"category": "code-d"
			},
			{
				"command": "code-d.openDubOnDpldocs",
				"title": "Open on dpldocs.info",
				"category": "code-d"
			},
			{
				"command": "code-d.listDubPackageDocuments",
				"title": "Show text document",
				"category": "code-d"
			},
			{
				"command": "code-d.openDependencyFile",
				"title": "Open File",
				"category": "code-d"
			},
			{
				"command": "code-d.switchConfiguration",
				"title": "Switch Configuration",
				"category": "code-d"
			},
			{
				"command": "code-d.switchArchType",
				"title": "Switch Arch Type",
				"category": "code-d"
			},
			{
				"command": "code-d.switchBuildType",
				"title": "Switch Build Type",
				"category": "code-d"
			},
			{
				"command": "code-d.switchCompiler",
				"title": "Switch Compiler",
				"category": "code-d"
			},
			{
				"command": "code-d.killServer",
				"title": "Kill DCD Server",
				"category": "code-d"
			},
			{
				"command": "code-d.restartServer",
				"title": "Restart DCD Server",
				"category": "code-d"
			},
			{
				"command": "code-d.reloadImports",
				"title": "Reload import paths",
				"category": "code-d",
				"icon": {
					"light": "images/refresh-light.svg",
					"dark": "images/refresh-dark.svg"
				}
			},
			{
				"command": "code-d.insertDscanner",
				"title": "Insert default dscanner.ini content",
				"category": "code-d"
			},
			{
				"command": "code-d.rdmdCurrent",
				"title": "Run document using rdmd",
				"category": "code-d"
			},
			{
				"command": "code-d.generateCoverageReport",
				"title": "Generate coverage report",
				"category": "code-d"
			},
			{
				"command": "code-d.showGCCalls",
				"title": "Show GC calls from profilegc.log",
				"category": "code-d"
			},
			{
				"command": "code-d.createProject",
				"title": "Create new Project",
				"category": "code-d"
			},
			{
				"command": "code-d.sortImports",
				"title": "Sort Active Import Block",
				"category": "code-d"
			},
			{
				"command": "code-d.implementMethods",
				"title": "Implement selected interface/base class",
				"category": "code-d"
			},
			{
				"command": "code-d.ignoreDscannerKey",
				"title": "Ignore DScanner warnings",
				"category": "code-d"
			},
			{
				"command": "code-d.searchDocs",
				"title": "Search dpldocs for Phobos & Dependency documentation",
				"category": "code-d"
			},
			{
				"command": "code-d.openDocsAtCursor",
				"title": "Search in dpldocs",
				"category": "code-d"
			},
			{
				"command": "code-d.convertDubRecipe",
				"title": "Convert between dub.json/dub.sdl",
				"category": "code-d",
				"icon": {
					"light": "./images/dub-convert-inverse.svg",
					"dark": "./images/dub-convert.svg"
				}
			},
			{
				"command": "code-d.viewUserGuide",
				"title": "Open User Guide / Documentation",
				"category": "code-d"
			},
			{
				"command": "code-d.setupCompiler",
				"title": "Setup D Compiler",
				"category": "code-d"
			},
			{
				"command": "code-d.dumpServedInfo",
				"title": "Dump serve-d state to output",
				"category": "code-d"
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "dub.json",
				"url": "./json-validation/dub.schema.json"
			}
		],
		"taskDefinitions": [
			{
				"type": "dub",
				"required": [],
				"properties": {
					"run": {
						"type": "boolean",
						"default": false,
						"description": "Whether to run the executable when running the task or not."
					},
					"test": {
						"type": "boolean",
						"default": false,
						"description": "Build and run a test build."
					},
					"root": {
						"type": "string",
						"default": "",
						"description": "Path to an alternative root to not compile the workspace relative to cwd."
					},
					"cwd": {
						"type": "string",
						"default": "",
						"description": "Working directory where DUB should be run relative to the workspace."
					},
					"overrides": {
						"type": "array",
						"default": [],
						"items": {
							"type": "string",
							"pattern": "^[-a-zA-Z0-9_.]+/.+$"
						},
						"description": "--override-config values in format <dependency>/<config> to override the configuration for a certain dependency. For example \"vibe-d:tls/openssl-1.1\""
					},
					"force": {
						"type": "boolean",
						"default": false,
						"description": "Set to true to add the --force flag to DUB."
					},
					"compiler": {
						"type": "string",
						"examples": [
							"$current"
						],
						"description": "Common name or path to compiler executable"
					},
					"archType": {
						"type": "string",
						"examples": [
							"$current"
						],
						"description": "Arch type to compile with"
					},
					"buildType": {
						"type": "string",
						"examples": [
							"$current"
						],
						"description": "Build type to compile with"
					},
					"configuration": {
						"type": "string",
						"examples": [
							"$current"
						],
						"description": "Configuration to run"
					},
					"args": {
						"$comment": "This is only here because vscode otherwise doesn't send this argument to the extension. Sadly the \"deprecated\" field is not actually represented in the UI yet.",
						"type": "array",
						"default": [],
						"items": {
							"type": "string"
						},
						"description": "**DEPRECATED** - use dub_args instead",
						"deprecated": true
					},
					"dub_args": {
						"type": "array",
						"default": [],
						"items": {
							"type": "string"
						},
						"description": "Extra arguments to pass to DUB"
					},
					"target_args": {
						"type": "array",
						"default": [],
						"items": {
							"type": "string"
						},
						"description": "Extra arguments to pass to the program (implemented by passing the arguments after a special `--` argument for DUB), only passed when run or test is set to true."
					},
					"_id": {
						"type": "string",
						"default": false,
						"description": "Workaround for waiting for vscode tasks to finish as API"
					}
				}
			}
		],
		"problemMatchers": [
			{
				"name": "dmd",
				"owner": "d",
				"fileLocation": [
					"autoDetect",
					"${workspaceFolder}"
				],
				"pattern": {
					"regexp": "^(.*?)(?:-mixin-\\d+)?\\((\\d+)(?:,\\s*(\\d+))?\\):\\s([Ww]arning|[Ee]rror|[Dd]eprecated|[Dd]eprecation|\\s{4,}):?\\s*(.*)$",
					"file": 1,
					"line": 2,
					"column": 3,
					"severity": 4,
					"message": 5
				}
			}
		],
		"walkthroughs": [
			{
				"id": "welcome",
				"title": "Get Started with D Development",
				"description": "Setup your development experience for the D programming language.",
				"steps": [
					{
						"id": "welcome.installCompiler",
						"title": "Install and choose a D compiler (DMD, LDC or GDC)",
						"description": "Run the 'Setup D Compiler' command to choose which D compiler to use with code-d and DUB. You can find available compilers on [https://dlang.org/download.html](https://dlang.org/download.html)\n[Setup D Compiler](command:code-d.setupCompiler)",
						"completionEvents": [
							"onCommand:code-d.setupCompiler"
						],
						"media": {
							"markdown": "res/walkthroughs/installCompiler.md"
						}
					},
					{
						"id": "welcome.userSettings",
						"title": "Configure code-d",
						"description": "Review some common user settings",
						"media": {
							"markdown": "res/walkthroughs/userSettings.md"
						}
					},
					{
						"id": "welcome.checkUserGuide",
						"title": "Check out the user guide",
						"description": "The included code-d user guide contains tutorials and a description on all features of code-d. Make sure you read it!\n[Open User Guide / Documentation](command:code-d.viewUserGuide)",
						"completionEvents": [
							"onCommand:code-d.viewUserGuide",
							"onStepSelected"
						],
						"media": {
							"markdown": "docs/index.md"
						}
					},
					{
						"id": "welcome.debugProject",
						"title": "Run and Debug your first project",
						"description": "Code-D includes debugging plugins to improve the D debugging experience. Get started with a project and debug it from code-d.",
						"media": {
							"markdown": "res/walkthroughs/debugProject.md"
						}
					}
				]
			}
		],
		"customEditors": [
			{
				"viewType": "code-d.dubRecipe",
				"displayName": "DUB Recipe Editor",
				"selector": [
					{
						"filenamePattern": "dub.json"
					},
					{
						"filenamePattern": "package.json"
					},
					{
						"filenamePattern": "dub.sdl"
					}
				],
				"priority": "option"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "tsc -p ./",
		"vscode:uninstall": "node ./out/uninstall.js",
		"compile": "tsc -p ./",
		"lint": "tslint -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js",
		"grammar": "js-yaml syntaxes/dml.yml > syntaxes/dml.json; js-yaml syntaxes/diet.yml > syntaxes/diet.json; js-yaml syntaxes/d.yml > syntaxes/d.json; js-yaml syntaxes/sdl.yml > syntaxes/sdl.json; mocha out/test/ci"
	},
	"dependencies": {
		"@vscode/codicons": "^0.0.27",
		"@vscode/webview-ui-toolkit": "^0.9.0",
		"@xmldom/xmldom": "^0.8.3",
		"adm-zip": "^0.5.9",
		"async": "^3.2.2",
		"axios": "^0.24.0",
		"code-d-api": "^0.2.1",
		"expand-tilde": "^2.0.2",
		"jsdom": "^17.0.0",
		"jsonc-parser": "^3.0.0",
		"line-by-line": "^0.1.6",
		"mkdirp": "^1.0.4",
		"ncp": "^2.0.0",
		"rimraf": "^3.0.2",
		"string-argv": "^0.3.1",
		"vscode-languageclient": "^8.0.2",
		"vscode-test-adapter-api": "^1.9.0",
		"which": "^2.0.2"
	},
	"devDependencies": {
		"@types/expand-tilde": "^2.0.0",
		"@types/glob": "^7.1.4",
		"@types/jsdom": "^16.2.13",
		"@types/mocha": "^9.0.0",
		"@types/node": "^12.20.23",
		"@types/parse5": "^5.0.3",
		"@types/vscode": "^1.60.0",
		"@types/which": "^2.0.1",
		"glob": "^7.1.7",
		"js-yaml": "^3.14.1",
		"mocha": "^9.1.3",
		"source-map-support": "^0.5.19",
		"typescript": "^4.4.2",
		"vscode-oniguruma": "^1.7.0",
		"vscode-test": "^1.6.1",
		"vscode-textmate": "^8.0.0"
	},
	"__metadata": {
		"id": "bf217d41-312b-4d39-9536-82fd0d9c6f94",
		"publisherDisplayName": "WebFreak",
		"publisherId": "e054f80a-50f9-4d80-85c8-6ff87eef6c35"
	}
}
